// Define a template specialization of as for MyClass


class MyClass {
private:
    int value;

public:
    // Constructor
    MyClass(int val) : value(val) {}

    // Getter method
    int getValue() const { return value; }
};

namespace Rcpp {
    template <>
    MyClass as(SEXP obj) {
        // Extract the value from the R object
        int val = as<int>(obj);

        // Create and return a MyClass object
        return MyClass(val);
    }

    // Define wrap for MyClass
    template <>
    SEXP wrap(const MyClass& obj) {
        // Convert the MyClass object to an R integer
        return wrap(obj.getValue());
    }
}



// Define a custom conversion class
class FunctionWrapper {
public:
    // Constructor taking a std::function
    FunctionWrapper(std::function<double(double, double, double, Rcpp::NumericVector)> func) : func(func) {}

    // Convert FunctionWrapper to Rcpp::Function
    operator Rcpp::Function() const {
        // Create an Rcpp::Function object that wraps the std::function
        return Rcpp::Function([this](double a, double b, double c, Rcpp::NumericVector vec) {
            // Call the std::function and return the result
            return func(a, b, c, vec);
        });
    }

    // Define the as function to convert from SEXP to FunctionWrapper
    static FunctionWrapper as(SEXP obj) {
        // Check if obj is a function
        if (Rf_isFunction(obj)) {
            // Convert SEXP to Rcpp::Function
            return FunctionWrapper(Rcpp::Function(obj));
        } else {
            // Throw an error if obj is not a function
            throw std::invalid_argument("Object is not a function.");
        }
    }

private:
    std::function<double(double, double, double, Rcpp::NumericVector)> func;
};

FunctionWrapper func = FunctionWrapper::as(funcSEXP);



namespace Rcpp {
    template <>
    FunctionWrapper as(SEXP obj) {
        // Extract the value from the R object
        int val = as<int>(obj);

        // Create and return a MyClass object
        return MyClass(val);
    }

    // Define wrap for MyClass
    template <>
    SEXP wrap(const FunctionWrapper& func) {
        // Convert the MyClass object to an R integer
        return wrap(obj.getValue());
    }
}
